// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zapharaos/go-spit (interfaces: TableOperations)
//
// Generated by this command:
//
//	mockgen -destination=mocks/table_mock.go -package=mocks . TableOperations
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	spit "github.com/Zapharaos/go-spit"
	gomock "go.uber.org/mock/gomock"
)

// MockTableOperations is a mock of TableOperations interface.
type MockTableOperations struct {
	ctrl     *gomock.Controller
	recorder *MockTableOperationsMockRecorder
	isgomock struct{}
}

// MockTableOperationsMockRecorder is the mock recorder for MockTableOperations.
type MockTableOperationsMockRecorder struct {
	mock *MockTableOperations
}

// NewMockTableOperations creates a new mock instance.
func NewMockTableOperations(ctrl *gomock.Controller) *MockTableOperations {
	mock := &MockTableOperations{ctrl: ctrl}
	mock.recorder = &MockTableOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableOperations) EXPECT() *MockTableOperationsMockRecorder {
	return m.recorder
}

// applyBorderToCell mocks base method.
func (m *MockTableOperations) applyBorderToCell(col, row int, side string, border *spit.Border) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyBorderToCell", col, row, side, border)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyBorderToCell indicates an expected call of applyBorderToCell.
func (mr *MockTableOperationsMockRecorder) applyBorderToCell(col, row, side, border any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyBorderToCell", reflect.TypeOf((*MockTableOperations)(nil).applyBorderToCell), col, row, side, border)
}

// applyBordersToRange mocks base method.
func (m *MockTableOperations) applyBordersToRange(startCol, startRow, endCol, endRow int, borders spit.Borders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyBordersToRange", startCol, startRow, endCol, endRow, borders)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyBordersToRange indicates an expected call of applyBordersToRange.
func (mr *MockTableOperationsMockRecorder) applyBordersToRange(startCol, startRow, endCol, endRow, borders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyBordersToRange", reflect.TypeOf((*MockTableOperations)(nil).applyBordersToRange), startCol, startRow, endCol, endRow, borders)
}

// applyStyleToCell mocks base method.
func (m *MockTableOperations) applyStyleToCell(col, row int, style spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyStyleToCell", col, row, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyStyleToCell indicates an expected call of applyStyleToCell.
func (mr *MockTableOperationsMockRecorder) applyStyleToCell(col, row, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyStyleToCell", reflect.TypeOf((*MockTableOperations)(nil).applyStyleToCell), col, row, style)
}

// applyStyleToRange mocks base method.
func (m *MockTableOperations) applyStyleToRange(startCol, startRow, endCol, endRow int, style spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyStyleToRange", startCol, startRow, endCol, endRow, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyStyleToRange indicates an expected call of applyStyleToRange.
func (mr *MockTableOperationsMockRecorder) applyStyleToRange(startCol, startRow, endCol, endRow, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyStyleToRange", reflect.TypeOf((*MockTableOperations)(nil).applyStyleToRange), startCol, startRow, endCol, endRow, style)
}

// getCellValue mocks base method.
func (m *MockTableOperations) getCellValue(col, row int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCellValue", col, row)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCellValue indicates an expected call of getCellValue.
func (mr *MockTableOperationsMockRecorder) getCellValue(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCellValue", reflect.TypeOf((*MockTableOperations)(nil).getCellValue), col, row)
}

// getColumnLetter mocks base method.
func (m *MockTableOperations) getColumnLetter(col int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getColumnLetter", col)
	ret0, _ := ret[0].(string)
	return ret0
}

// getColumnLetter indicates an expected call of getColumnLetter.
func (mr *MockTableOperationsMockRecorder) getColumnLetter(col any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getColumnLetter", reflect.TypeOf((*MockTableOperations)(nil).getColumnLetter), col)
}

// getTable mocks base method.
func (m *MockTableOperations) getTable() *spit.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTable")
	ret0, _ := ret[0].(*spit.Table)
	return ret0
}

// getTable indicates an expected call of getTable.
func (mr *MockTableOperationsMockRecorder) getTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTable", reflect.TypeOf((*MockTableOperations)(nil).getTable))
}

// hasExistingBorder mocks base method.
func (m *MockTableOperations) hasExistingBorder(col, row int, side string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasExistingBorder", col, row, side)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasExistingBorder indicates an expected call of hasExistingBorder.
func (mr *MockTableOperationsMockRecorder) hasExistingBorder(col, row, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasExistingBorder", reflect.TypeOf((*MockTableOperations)(nil).hasExistingBorder), col, row, side)
}

// isCellMerged mocks base method.
func (m *MockTableOperations) isCellMerged(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCellMerged", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCellMerged indicates an expected call of isCellMerged.
func (mr *MockTableOperationsMockRecorder) isCellMerged(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCellMerged", reflect.TypeOf((*MockTableOperations)(nil).isCellMerged), col, row)
}

// isCellMergedHorizontally mocks base method.
func (m *MockTableOperations) isCellMergedHorizontally(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCellMergedHorizontally", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCellMergedHorizontally indicates an expected call of isCellMergedHorizontally.
func (mr *MockTableOperationsMockRecorder) isCellMergedHorizontally(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCellMergedHorizontally", reflect.TypeOf((*MockTableOperations)(nil).isCellMergedHorizontally), col, row)
}

// mergeCells mocks base method.
func (m *MockTableOperations) mergeCells(startCol, startRow, endCol, endRow int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mergeCells", startCol, startRow, endCol, endRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// mergeCells indicates an expected call of mergeCells.
func (mr *MockTableOperationsMockRecorder) mergeCells(startCol, startRow, endCol, endRow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mergeCells", reflect.TypeOf((*MockTableOperations)(nil).mergeCells), startCol, startRow, endCol, endRow)
}

// processValue mocks base method.
func (m *MockTableOperations) processValue(value any, format string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processValue", value, format)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// processValue indicates an expected call of processValue.
func (mr *MockTableOperationsMockRecorder) processValue(value, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processValue", reflect.TypeOf((*MockTableOperations)(nil).processValue), value, format)
}

// setCellValue mocks base method.
func (m *MockTableOperations) setCellValue(col, row int, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setCellValue", col, row, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// setCellValue indicates an expected call of setCellValue.
func (mr *MockTableOperationsMockRecorder) setCellValue(col, row, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setCellValue", reflect.TypeOf((*MockTableOperations)(nil).setCellValue), col, row, value)
}
