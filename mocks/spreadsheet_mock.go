// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zapharaos/go-spit (interfaces: Spreadsheet)
//
// Generated by this command:
//
//	mockgen -destination=mocks/spreadsheet_mock.go -package=mocks . Spreadsheet
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	go_spit "github.com/Zapharaos/go-spit"
	gomock "go.uber.org/mock/gomock"
)

// MockSpreadsheet is a mock of Spreadsheet interface.
type MockSpreadsheet struct {
	ctrl     *gomock.Controller
	recorder *MockSpreadsheetMockRecorder
	isgomock struct{}
}

// MockSpreadsheetMockRecorder is the mock recorder for MockSpreadsheet.
type MockSpreadsheetMockRecorder struct {
	mock *MockSpreadsheet
}

// NewMockSpreadsheet creates a new mock instance.
func NewMockSpreadsheet(ctrl *gomock.Controller) *MockSpreadsheet {
	mock := &MockSpreadsheet{ctrl: ctrl}
	mock.recorder = &MockSpreadsheetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpreadsheet) EXPECT() *MockSpreadsheetMockRecorder {
	return m.recorder
}

// applyBorderToCell mocks base method.
func (m *MockSpreadsheet) applyBorderToCell(col, row int, side string, border *go_spit.Border) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyBorderToCell", col, row, side, border)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyBorderToCell indicates an expected call of applyBorderToCell.
func (mr *MockSpreadsheetMockRecorder) applyBorderToCell(col, row, side, border any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyBorderToCell", reflect.TypeOf((*MockSpreadsheet)(nil).applyBorderToCell), col, row, side, border)
}

// applyBordersToRange mocks base method.
func (m *MockSpreadsheet) applyBordersToRange(startCol, startRow, endCol, endRow int, borders go_spit.Borders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyBordersToRange", startCol, startRow, endCol, endRow, borders)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyBordersToRange indicates an expected call of applyBordersToRange.
func (mr *MockSpreadsheetMockRecorder) applyBordersToRange(startCol, startRow, endCol, endRow, borders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyBordersToRange", reflect.TypeOf((*MockSpreadsheet)(nil).applyBordersToRange), startCol, startRow, endCol, endRow, borders)
}

// applyStyleToCell mocks base method.
func (m *MockSpreadsheet) applyStyleToCell(col, row int, style go_spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyStyleToCell", col, row, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyStyleToCell indicates an expected call of applyStyleToCell.
func (mr *MockSpreadsheetMockRecorder) applyStyleToCell(col, row, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyStyleToCell", reflect.TypeOf((*MockSpreadsheet)(nil).applyStyleToCell), col, row, style)
}

// applyStyleToRange mocks base method.
func (m *MockSpreadsheet) applyStyleToRange(startCol, startRow, endCol, endRow int, style go_spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyStyleToRange", startCol, startRow, endCol, endRow, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyStyleToRange indicates an expected call of applyStyleToRange.
func (mr *MockSpreadsheetMockRecorder) applyStyleToRange(startCol, startRow, endCol, endRow, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyStyleToRange", reflect.TypeOf((*MockSpreadsheet)(nil).applyStyleToRange), startCol, startRow, endCol, endRow, style)
}

// close mocks base method.
func (m *MockSpreadsheet) close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "close")
	ret0, _ := ret[0].(error)
	return ret0
}

// close indicates an expected call of close.
func (mr *MockSpreadsheetMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockSpreadsheet)(nil).close))
}

// createNewFile mocks base method.
func (m *MockSpreadsheet) createNewFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createNewFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// createNewFile indicates an expected call of createNewFile.
func (mr *MockSpreadsheetMockRecorder) createNewFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNewFile", reflect.TypeOf((*MockSpreadsheet)(nil).createNewFile))
}

// createSheet mocks base method.
func (m *MockSpreadsheet) createSheet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createSheet")
	ret0, _ := ret[0].(error)
	return ret0
}

// createSheet indicates an expected call of createSheet.
func (mr *MockSpreadsheetMockRecorder) createSheet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createSheet", reflect.TypeOf((*MockSpreadsheet)(nil).createSheet))
}

// getCellValue mocks base method.
func (m *MockSpreadsheet) getCellValue(col, row int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCellValue", col, row)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCellValue indicates an expected call of getCellValue.
func (mr *MockSpreadsheetMockRecorder) getCellValue(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCellValue", reflect.TypeOf((*MockSpreadsheet)(nil).getCellValue), col, row)
}

// getColumnLetter mocks base method.
func (m *MockSpreadsheet) getColumnLetter(col int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getColumnLetter", col)
	ret0, _ := ret[0].(string)
	return ret0
}

// getColumnLetter indicates an expected call of getColumnLetter.
func (mr *MockSpreadsheetMockRecorder) getColumnLetter(col any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getColumnLetter", reflect.TypeOf((*MockSpreadsheet)(nil).getColumnLetter), col)
}

// getFile mocks base method.
func (m *MockSpreadsheet) getFile() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFile")
	ret0, _ := ret[0].(any)
	return ret0
}

// getFile indicates an expected call of getFile.
func (mr *MockSpreadsheetMockRecorder) getFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFile", reflect.TypeOf((*MockSpreadsheet)(nil).getFile))
}

// getSheetName mocks base method.
func (m *MockSpreadsheet) getSheetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSheetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// getSheetName indicates an expected call of getSheetName.
func (mr *MockSpreadsheetMockRecorder) getSheetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSheetName", reflect.TypeOf((*MockSpreadsheet)(nil).getSheetName))
}

// getTable mocks base method.
func (m *MockSpreadsheet) getTable() *go_spit.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTable")
	ret0, _ := ret[0].(*go_spit.Table)
	return ret0
}

// getTable indicates an expected call of getTable.
func (mr *MockSpreadsheetMockRecorder) getTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTable", reflect.TypeOf((*MockSpreadsheet)(nil).getTable))
}

// hasExistingBorder mocks base method.
func (m *MockSpreadsheet) hasExistingBorder(col, row int, side string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasExistingBorder", col, row, side)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasExistingBorder indicates an expected call of hasExistingBorder.
func (mr *MockSpreadsheetMockRecorder) hasExistingBorder(col, row, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasExistingBorder", reflect.TypeOf((*MockSpreadsheet)(nil).hasExistingBorder), col, row, side)
}

// isCellMerged mocks base method.
func (m *MockSpreadsheet) isCellMerged(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCellMerged", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCellMerged indicates an expected call of isCellMerged.
func (mr *MockSpreadsheetMockRecorder) isCellMerged(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCellMerged", reflect.TypeOf((*MockSpreadsheet)(nil).isCellMerged), col, row)
}

// isCellMergedHorizontally mocks base method.
func (m *MockSpreadsheet) isCellMergedHorizontally(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCellMergedHorizontally", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCellMergedHorizontally indicates an expected call of isCellMergedHorizontally.
func (mr *MockSpreadsheetMockRecorder) isCellMergedHorizontally(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCellMergedHorizontally", reflect.TypeOf((*MockSpreadsheet)(nil).isCellMergedHorizontally), col, row)
}

// mergeCells mocks base method.
func (m *MockSpreadsheet) mergeCells(startCol, startRow, endCol, endRow int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mergeCells", startCol, startRow, endCol, endRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// mergeCells indicates an expected call of mergeCells.
func (mr *MockSpreadsheetMockRecorder) mergeCells(startCol, startRow, endCol, endRow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mergeCells", reflect.TypeOf((*MockSpreadsheet)(nil).mergeCells), startCol, startRow, endCol, endRow)
}

// processValue mocks base method.
func (m *MockSpreadsheet) processValue(value any, format string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processValue", value, format)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// processValue indicates an expected call of processValue.
func (mr *MockSpreadsheetMockRecorder) processValue(value, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processValue", reflect.TypeOf((*MockSpreadsheet)(nil).processValue), value, format)
}

// saveToWriter mocks base method.
func (m *MockSpreadsheet) saveToWriter(writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "saveToWriter", writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveToWriter indicates an expected call of saveToWriter.
func (mr *MockSpreadsheetMockRecorder) saveToWriter(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveToWriter", reflect.TypeOf((*MockSpreadsheet)(nil).saveToWriter), writer)
}

// setActiveSheet mocks base method.
func (m *MockSpreadsheet) setActiveSheet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setActiveSheet")
	ret0, _ := ret[0].(error)
	return ret0
}

// setActiveSheet indicates an expected call of setActiveSheet.
func (mr *MockSpreadsheetMockRecorder) setActiveSheet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setActiveSheet", reflect.TypeOf((*MockSpreadsheet)(nil).setActiveSheet))
}

// setCellValue mocks base method.
func (m *MockSpreadsheet) setCellValue(col, row int, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setCellValue", col, row, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// setCellValue indicates an expected call of setCellValue.
func (mr *MockSpreadsheetMockRecorder) setCellValue(col, row, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setCellValue", reflect.TypeOf((*MockSpreadsheet)(nil).setCellValue), col, row, value)
}

// setColumnWidth mocks base method.
func (m *MockSpreadsheet) setColumnWidth(colLetter string, width float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setColumnWidth", colLetter, width)
	ret0, _ := ret[0].(error)
	return ret0
}

// setColumnWidth indicates an expected call of setColumnWidth.
func (mr *MockSpreadsheetMockRecorder) setColumnWidth(colLetter, width any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setColumnWidth", reflect.TypeOf((*MockSpreadsheet)(nil).setColumnWidth), colLetter, width)
}

// setSheetName mocks base method.
func (m *MockSpreadsheet) setSheetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setSheetName", name)
}

// setSheetName indicates an expected call of setSheetName.
func (mr *MockSpreadsheetMockRecorder) setSheetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setSheetName", reflect.TypeOf((*MockSpreadsheet)(nil).setSheetName), name)
}
