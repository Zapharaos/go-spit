// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zapharaos/go-spit (interfaces: Spreadsheet)
//
// Generated by this command:
//
//	mockgen -destination=mocks/spreadsheet_mock.go -package=mocks . Spreadsheet
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	spit "github.com/Zapharaos/go-spit"
	gomock "go.uber.org/mock/gomock"
)

// MockSpreadsheet is a mock of Spreadsheet interface.
type MockSpreadsheet struct {
	ctrl     *gomock.Controller
	recorder *MockSpreadsheetMockRecorder
	isgomock struct{}
}

// MockSpreadsheetMockRecorder is the mock recorder for MockSpreadsheet.
type MockSpreadsheetMockRecorder struct {
	mock *MockSpreadsheet
}

// NewMockSpreadsheet creates a new mock instance.
func NewMockSpreadsheet(ctrl *gomock.Controller) *MockSpreadsheet {
	mock := &MockSpreadsheet{ctrl: ctrl}
	mock.recorder = &MockSpreadsheetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpreadsheet) EXPECT() *MockSpreadsheetMockRecorder {
	return m.recorder
}

// ApplyBorderToCell mocks base method.
func (m *MockSpreadsheet) ApplyBorderToCell(col, row int, side string, border *spit.Border) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBorderToCell", col, row, side, border)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyBorderToCell indicates an expected call of ApplyBorderToCell.
func (mr *MockSpreadsheetMockRecorder) ApplyBorderToCell(col, row, side, border any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBorderToCell", reflect.TypeOf((*MockSpreadsheet)(nil).ApplyBorderToCell), col, row, side, border)
}

// ApplyBordersToRange mocks base method.
func (m *MockSpreadsheet) ApplyBordersToRange(startCol, startRow, endCol, endRow int, borders spit.Borders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBordersToRange", startCol, startRow, endCol, endRow, borders)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyBordersToRange indicates an expected call of ApplyBordersToRange.
func (mr *MockSpreadsheetMockRecorder) ApplyBordersToRange(startCol, startRow, endCol, endRow, borders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBordersToRange", reflect.TypeOf((*MockSpreadsheet)(nil).ApplyBordersToRange), startCol, startRow, endCol, endRow, borders)
}

// ApplyStyleToCell mocks base method.
func (m *MockSpreadsheet) ApplyStyleToCell(col, row int, style spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStyleToCell", col, row, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyStyleToCell indicates an expected call of ApplyStyleToCell.
func (mr *MockSpreadsheetMockRecorder) ApplyStyleToCell(col, row, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStyleToCell", reflect.TypeOf((*MockSpreadsheet)(nil).ApplyStyleToCell), col, row, style)
}

// ApplyStyleToRange mocks base method.
func (m *MockSpreadsheet) ApplyStyleToRange(startCol, startRow, endCol, endRow int, style spit.Style) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStyleToRange", startCol, startRow, endCol, endRow, style)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyStyleToRange indicates an expected call of ApplyStyleToRange.
func (mr *MockSpreadsheetMockRecorder) ApplyStyleToRange(startCol, startRow, endCol, endRow, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStyleToRange", reflect.TypeOf((*MockSpreadsheet)(nil).ApplyStyleToRange), startCol, startRow, endCol, endRow, style)
}

// Close mocks base method.
func (m *MockSpreadsheet) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSpreadsheetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSpreadsheet)(nil).Close))
}

// CreateNewFile mocks base method.
func (m *MockSpreadsheet) CreateNewFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewFile indicates an expected call of CreateNewFile.
func (mr *MockSpreadsheetMockRecorder) CreateNewFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewFile", reflect.TypeOf((*MockSpreadsheet)(nil).CreateNewFile))
}

// CreateSheet mocks base method.
func (m *MockSpreadsheet) CreateSheet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSheet")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSheet indicates an expected call of CreateSheet.
func (mr *MockSpreadsheetMockRecorder) CreateSheet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheet", reflect.TypeOf((*MockSpreadsheet)(nil).CreateSheet))
}

// GetCellValue mocks base method.
func (m *MockSpreadsheet) GetCellValue(col, row int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellValue", col, row)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellValue indicates an expected call of GetCellValue.
func (mr *MockSpreadsheetMockRecorder) GetCellValue(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellValue", reflect.TypeOf((*MockSpreadsheet)(nil).GetCellValue), col, row)
}

// GetColumnLetter mocks base method.
func (m *MockSpreadsheet) GetColumnLetter(col int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnLetter", col)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetColumnLetter indicates an expected call of GetColumnLetter.
func (mr *MockSpreadsheetMockRecorder) GetColumnLetter(col any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnLetter", reflect.TypeOf((*MockSpreadsheet)(nil).GetColumnLetter), col)
}

// GetFile mocks base method.
func (m *MockSpreadsheet) GetFile() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockSpreadsheetMockRecorder) GetFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockSpreadsheet)(nil).GetFile))
}

// GetSheetName mocks base method.
func (m *MockSpreadsheet) GetSheetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSheetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSheetName indicates an expected call of GetSheetName.
func (mr *MockSpreadsheetMockRecorder) GetSheetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSheetName", reflect.TypeOf((*MockSpreadsheet)(nil).GetSheetName))
}

// GetTable mocks base method.
func (m *MockSpreadsheet) GetTable() *spit.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable")
	ret0, _ := ret[0].(*spit.Table)
	return ret0
}

// GetTable indicates an expected call of GetTable.
func (mr *MockSpreadsheetMockRecorder) GetTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockSpreadsheet)(nil).GetTable))
}

// HasExistingBorder mocks base method.
func (m *MockSpreadsheet) HasExistingBorder(col, row int, side string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExistingBorder", col, row, side)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExistingBorder indicates an expected call of HasExistingBorder.
func (mr *MockSpreadsheetMockRecorder) HasExistingBorder(col, row, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExistingBorder", reflect.TypeOf((*MockSpreadsheet)(nil).HasExistingBorder), col, row, side)
}

// IsCellMerged mocks base method.
func (m *MockSpreadsheet) IsCellMerged(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCellMerged", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCellMerged indicates an expected call of IsCellMerged.
func (mr *MockSpreadsheetMockRecorder) IsCellMerged(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCellMerged", reflect.TypeOf((*MockSpreadsheet)(nil).IsCellMerged), col, row)
}

// IsCellMergedHorizontally mocks base method.
func (m *MockSpreadsheet) IsCellMergedHorizontally(col, row int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCellMergedHorizontally", col, row)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCellMergedHorizontally indicates an expected call of IsCellMergedHorizontally.
func (mr *MockSpreadsheetMockRecorder) IsCellMergedHorizontally(col, row any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCellMergedHorizontally", reflect.TypeOf((*MockSpreadsheet)(nil).IsCellMergedHorizontally), col, row)
}

// MergeCells mocks base method.
func (m *MockSpreadsheet) MergeCells(startCol, startRow, endCol, endRow int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeCells", startCol, startRow, endCol, endRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeCells indicates an expected call of MergeCells.
func (mr *MockSpreadsheetMockRecorder) MergeCells(startCol, startRow, endCol, endRow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeCells", reflect.TypeOf((*MockSpreadsheet)(nil).MergeCells), startCol, startRow, endCol, endRow)
}

// ProcessValue mocks base method.
func (m *MockSpreadsheet) ProcessValue(value any, format string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessValue", value, format)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessValue indicates an expected call of ProcessValue.
func (mr *MockSpreadsheetMockRecorder) ProcessValue(value, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessValue", reflect.TypeOf((*MockSpreadsheet)(nil).ProcessValue), value, format)
}

// SaveToWriter mocks base method.
func (m *MockSpreadsheet) SaveToWriter(writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToWriter", writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToWriter indicates an expected call of SaveToWriter.
func (mr *MockSpreadsheetMockRecorder) SaveToWriter(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToWriter", reflect.TypeOf((*MockSpreadsheet)(nil).SaveToWriter), writer)
}

// SetActiveSheet mocks base method.
func (m *MockSpreadsheet) SetActiveSheet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveSheet")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveSheet indicates an expected call of SetActiveSheet.
func (mr *MockSpreadsheetMockRecorder) SetActiveSheet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveSheet", reflect.TypeOf((*MockSpreadsheet)(nil).SetActiveSheet))
}

// SetCellValue mocks base method.
func (m *MockSpreadsheet) SetCellValue(col, row int, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCellValue", col, row, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCellValue indicates an expected call of SetCellValue.
func (mr *MockSpreadsheetMockRecorder) SetCellValue(col, row, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCellValue", reflect.TypeOf((*MockSpreadsheet)(nil).SetCellValue), col, row, value)
}

// SetColumnWidth mocks base method.
func (m *MockSpreadsheet) SetColumnWidth(colLetter string, width float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetColumnWidth", colLetter, width)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetColumnWidth indicates an expected call of SetColumnWidth.
func (mr *MockSpreadsheetMockRecorder) SetColumnWidth(colLetter, width any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColumnWidth", reflect.TypeOf((*MockSpreadsheet)(nil).SetColumnWidth), colLetter, width)
}

// SetSheetName mocks base method.
func (m *MockSpreadsheet) SetSheetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSheetName", name)
}

// SetSheetName indicates an expected call of SetSheetName.
func (mr *MockSpreadsheetMockRecorder) SetSheetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSheetName", reflect.TypeOf((*MockSpreadsheet)(nil).SetSheetName), name)
}
